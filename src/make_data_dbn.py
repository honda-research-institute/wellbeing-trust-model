from data_preprocessing import *

#this function get all data and rename them and discretize them and use the columns that we want to include in our dbn to be ready to be use for our DBN
def make_dbn_data(main_survey_done_df):
    # sat0 = main_survey_done_df['1_satisfaction3']
    # sat1 = main_survey_done_df['3_satisfaction3']
    #here we have trust, wellbeing, intention and actions in both interactions
    t0 = main_survey_done_df['1_trust2']
    t1 = main_survey_done_df['3_trust2']
    I0 = main_survey_done_df['2_Intention']
    I1 = main_survey_done_df['2_Intention']
    a0 = main_survey_done_df['drive_name'].str[3]
    a1 = main_survey_done_df['drive_name'].str[3]
    # ow0 = main_survey_done_df['1_total']
    # ow1 = main_survey_done_df['1_total']
    w0 = main_survey_done_df['1_total']
    w1 = main_survey_done_df['3_total']
    oa0 = main_survey_done_df['drive_name'].str[2]
    oa1 = main_survey_done_df['drive_name'].str[2]
    #I did some preprocessing on ow data to use it on dbn the preprocessing that include swapping rows etc in swap_row_actions.ipynb
    ow_list = [5.428571428571429, 4.0, 7.0, 4.0, 6.571428571428571, 2.2857142857142856, 4.571428571428571, 3.0, 3.7142857142857144, 5.428571428571429, 6.142857142857143, 3.5714285714285716, 7.0, 2.857142857142857, 5.142857142857143, 3.7142857142857144, 3.7142857142857144, 5.142857142857143, 4.857142857142857, 6.714285714285714, 6.0, 5.0, 6.0, 5.0, 6.857142857142857, 5.285714285714286, 3.857142857142857, 5.285714285714286, 3.4285714285714284, 5.0, 4.285714285714286, 4.714285714285714, 5.0, 5.714285714285714, 5.571428571428571, 4.0, 6.142857142857143, 6.142857142857143, 4.285714285714286, 6.142857142857143, 4.0, 5.428571428571429, 4.0, 4.142857142857143, 6.857142857142857, 4.142857142857143, 5.428571428571429, 5.285714285714286, 3.2857142857142856, 5.428571428571429, 2.857142857142857, 4.857142857142857, 5.428571428571429, 3.2857142857142856, 6.142857142857143, 4.857142857142857, 5.285714285714286, 7.0, 4.571428571428571, 6.142857142857143, 6.142857142857143, 4.714285714285714, 5.857142857142857, 6.142857142857143, 6.0, 4.428571428571429, 2.2857142857142856, 5.857142857142857, 5.571428571428571, 4.285714285714286, 3.7142857142857144, 4.0, 2.2857142857142856, 2.2857142857142856, 6.0, 5.142857142857143, 5.857142857142857, 5.142857142857143, 5.714285714285714, 5.285714285714286, 5.142857142857143, 7.0, 5.857142857142857, 4.714285714285714, 7.0, 4.571428571428571, 3.5714285714285716, 3.2857142857142856, 4.142857142857143, 6.571428571428571, 6.285714285714286, 7.0, 4.714285714285714, 3.0, 4.714285714285714, 4.0, 4.142857142857143, 5.285714285714286, 4.571428571428571, 4.142857142857143, 4.857142857142857, 4.428571428571429, 5.857142857142857, 3.7142857142857144, 6.0, 4.285714285714286, 6.714285714285714, 5.714285714285714, 2.5714285714285716, 4.0, 6.285714285714286, 6.142857142857143, 2.857142857142857, 4.285714285714286, 5.142857142857143, 6.285714285714286, 6.0, 6.285714285714286, 3.0, 4.0, 7.0, 4.857142857142857, 4.571428571428571, 5.857142857142857, 4.0, 6.142857142857143, 5.571428571428571, 5.714285714285714, 5.142857142857143, 5.857142857142857, 4.857142857142857, 6.571428571428571, 5.142857142857143, 4.0, 4.285714285714286, 5.714285714285714, 4.142857142857143, 5.142857142857143, 4.0, 3.4285714285714284, 6.142857142857143, 7.0, 5.142857142857143, 5.0, 6.0, 5.142857142857143, 3.857142857142857, 5.142857142857143, 3.7142857142857144, 4.0, 6.285714285714286, 2.5714285714285716, 4.571428571428571, 5.428571428571429, 6.142857142857143, 2.5714285714285716, 4.571428571428571, 6.0, 6.571428571428571, 6.142857142857143, 4.714285714285714, 5.714285714285714, 5.571428571428571, 5.142857142857143, 4.0, 5.857142857142857, 5.571428571428571, 5.142857142857143, 3.5714285714285716, 6.857142857142857, 4.428571428571429, 4.714285714285714, 4.857142857142857, 7.0, 4.285714285714286, 7.0, 6.571428571428571, 5.857142857142857, 3.4285714285714284, 1.8571428571428572, 2.7142857142857144, 3.142857142857143, 4.142857142857143, 6.285714285714286, 3.7142857142857144, 6.0, 3.4285714285714284, 6.714285714285714, 3.7142857142857144, 4.714285714285714, 1.8571428571428572, 4.857142857142857, 6.0, 4.428571428571429, 4.142857142857143, 7.0, 5.571428571428571, 5.0, 6.571428571428571, 5.714285714285714, 3.857142857142857, 4.714285714285714, 6.0, 3.5714285714285716, 2.5714285714285716, 4.571428571428571, 5.285714285714286, 5.285714285714286, 3.7142857142857144, 4.714285714285714, 4.714285714285714, 3.0, 6.571428571428571, 4.571428571428571, 5.142857142857143, 6.714285714285714, 2.0, 3.857142857142857, 3.7142857142857144, 6.0, 3.4285714285714284, 3.857142857142857, 4.142857142857143, 5.0, 4.0, 3.857142857142857, 3.142857142857143, 4.571428571428571, 6.0, 5.285714285714286, 5.0, 6.571428571428571, 5.0, 5.571428571428571, 4.428571428571429, 4.142857142857143, 3.857142857142857, 5.714285714285714, 2.4285714285714284, 4.571428571428571, 3.0, 6.142857142857143, 5.142857142857143, 3.4285714285714284, 7.0, 6.571428571428571, 5.857142857142857, 4.714285714285714, 5.857142857142857, 1.8571428571428572, 6.714285714285714, 3.7142857142857144, 2.4285714285714284, 5.285714285714286, 4.857142857142857, 6.714285714285714, 5.0, 5.428571428571429, 3.0, 4.857142857142857, 2.142857142857143, 4.428571428571429, 4.571428571428571, 4.714285714285714, 3.7142857142857144, 7.0, 5.857142857142857, 5.857142857142857, 3.857142857142857, 2.857142857142857, 3.142857142857143, 6.571428571428571, 6.0, 5.142857142857143, 6.714285714285714, 4.0, 3.2857142857142856, 4.857142857142857, 5.142857142857143, 2.7142857142857144, 4.714285714285714, 4.142857142857143, 5.857142857142857, 1.7142857142857142, 4.857142857142857, 6.714285714285714, 6.0, 3.857142857142857, 4.857142857142857, 5.714285714285714, 3.7142857142857144, 4.285714285714286, 6.571428571428571, 5.428571428571429, 5.0, 3.0, 6.571428571428571, 5.571428571428571, 2.7142857142857144, 6.571428571428571, 4.714285714285714, 4.285714285714286, 4.714285714285714, 6.714285714285714, 5.285714285714286, 7.0, 5.571428571428571, 3.857142857142857, 6.0, 5.857142857142857, 5.0, 3.2857142857142856, 3.5714285714285716, 4.714285714285714, 4.857142857142857, 5.714285714285714, 6.714285714285714, 4.714285714285714, 4.714285714285714, 4.714285714285714, 4.714285714285714, 6.571428571428571, 6.714285714285714, 6.428571428571429, 4.428571428571429, 7.0, 6.428571428571429, 6.0, 7.0, 5.571428571428571, 4.714285714285714, 3.4285714285714284, 5.857142857142857, 3.142857142857143, 3.4285714285714284, 4.857142857142857, 5.285714285714286, 5.428571428571429, 2.4285714285714284, 5.0, 5.428571428571429, 5.428571428571429, 2.5714285714285716, 5.571428571428571, 6.428571428571429, 5.714285714285714, 5.428571428571429, 6.857142857142857, 5.0, 6.571428571428571, 7.0, 6.857142857142857, 4.857142857142857, 6.0, 4.428571428571429, 5.571428571428571, 6.285714285714286, 5.285714285714286, 4.142857142857143, 5.142857142857143, 6.571428571428571, 4.857142857142857, 4.142857142857143, 5.142857142857143, 6.428571428571429, 4.142857142857143, 6.428571428571429, 6.857142857142857, 6.428571428571429, 4.857142857142857, 6.857142857142857, 5.0, 4.857142857142857, 6.142857142857143, 6.428571428571429, 3.4285714285714284, 6.571428571428571, 2.857142857142857, 6.142857142857143, 5.857142857142857, 4.142857142857143, 6.142857142857143, 4.0, 5.714285714285714, 5.0, 4.571428571428571, 5.714285714285714, 4.0, 6.0, 6.571428571428571, 2.0, 6.428571428571429, 2.7142857142857144, 2.7142857142857144, 5.714285714285714, 4.285714285714286, 4.285714285714286, 4.857142857142857, 6.714285714285714, 4.571428571428571, 5.428571428571429, 3.857142857142857, 5.714285714285714, 6.142857142857143, 1.8571428571428572, 6.142857142857143, 4.142857142857143, 5.857142857142857, 5.714285714285714, 3.142857142857143, 4.285714285714286, 4.714285714285714, 5.428571428571429, 5.714285714285714, 5.428571428571429, 4.0, 7.0, 6.571428571428571, 4.0, 2.2857142857142856, 4.571428571428571, 3.7142857142857144, 5.428571428571429, 3.0, 6.142857142857143, 2.857142857142857, 7.0, 5.142857142857143, 3.7142857142857144, 3.7142857142857144, 4.857142857142857, 5.142857142857143, 6.0, 5.0, 5.285714285714286, 6.714285714285714, 3.4285714285714284, 5.0, 6.0, 5.0, 6.857142857142857, 5.285714285714286, 3.857142857142857, 4.714285714285714, 6.142857142857143, 4.285714285714286, 4.285714285714286, 4.0, 5.0, 5.714285714285714, 5.571428571428571, 4.0, 4.0, 6.142857142857143, 6.142857142857143, 5.428571428571429, 3.2857142857142856, 6.142857142857143, 5.428571428571429, 4.857142857142857, 4.142857142857143, 6.857142857142857, 4.142857142857143, 5.285714285714286, 5.428571428571429, 5.285714285714286, 5.857142857142857, 6.142857142857143, 3.2857142857142856, 2.857142857142857, 6.0, 4.857142857142857, 5.428571428571429, 2.2857142857142856, 7.0, 5.857142857142857, 2.2857142857142856, 4.571428571428571, 6.0, 6.142857142857143, 6.142857142857143, 5.857142857142857, 5.714285714285714, 4.714285714285714, 4.428571428571429, 5.571428571428571, 5.285714285714286, 7.0, 4.142857142857143, 6.571428571428571, 6.285714285714286, 4.285714285714286, 4.714285714285714, 3.7142857142857144, 4.142857142857143, 5.857142857142857, 4.0, 2.2857142857142856, 6.714285714285714, 5.714285714285714, 5.142857142857143, 5.142857142857143, 4.0, 5.142857142857143, 5.857142857142857, 4.714285714285714, 6.285714285714286, 6.142857142857143, 6.285714285714286, 6.0, 7.0, 4.571428571428571, 3.5714285714285716, 7.0, 3.2857142857142856, 4.857142857142857, 7.0, 3.0, 4.714285714285714, 4.0, 5.285714285714286, 5.857142857142857, 6.142857142857143, 4.571428571428571, 4.142857142857143, 5.714285714285714, 4.857142857142857, 4.428571428571429, 5.857142857142857, 4.857142857142857, 3.7142857142857144, 6.0, 4.285714285714286, 2.5714285714285716, 5.142857142857143, 2.857142857142857, 4.285714285714286, 5.714285714285714, 6.142857142857143, 7.0, 4.285714285714286, 5.142857142857143, 3.0, 5.142857142857143, 4.0, 5.0, 6.0, 6.285714285714286, 4.571428571428571, 4.571428571428571, 4.0, 5.571428571428571, 5.142857142857143, 6.571428571428571, 5.428571428571429, 4.0, 4.142857142857143, 6.142857142857143, 4.571428571428571, 5.142857142857143, 4.0, 6.0, 3.4285714285714284, 6.571428571428571, 6.142857142857143, 5.142857142857143, 5.714285714285714, 5.142857142857143, 4.0, 5.857142857142857, 3.857142857142857, 5.571428571428571, 6.857142857142857, 4.857142857142857, 5.142857142857143, 3.7142857142857144, 4.285714285714286, 7.0, 4.0, 6.571428571428571, 5.857142857142857, 3.142857142857143, 4.142857142857143, 2.5714285714285716, 2.5714285714285716, 4.714285714285714, 6.285714285714286, 6.714285714285714, 5.571428571428571, 4.857142857142857, 6.0, 5.142857142857143, 3.5714285714285716, 4.142857142857143, 6.857142857142857, 3.2857142857142856, 3.2857142857142856, 3.5714285714285716, 6.285714285714286]
    ow1 = pd.DataFrame({'C': ow_list})
    ow0 = ow1
    df = pd.concat([t0, w0, ow0, I0, a0, oa0, t1, w1, ow1, I1, a1, oa1], axis = 1)
    # df_bn = pd.concat([t0, w0, ow0, I0, a0, oa0, t1, w1, ow1, I1, a1, oa1], axis = 1)
    df_bn = pd.concat([t0, w0, I0, a0, oa0, t1, w1, ow1], axis = 1)
    df_bn = df_bn.dropna()
    # print(df_bn)

    #Depending on whether we want to use dynamic bayesian network or bayesian network of the pgmpy library the naming are different
    #This one is for DBN
    col = [("t", 0), ("w", 0), ("ow", 0), ("I", 0), ("a", 0), ("oa", 0), ("t", 1), ("w", 1), ("ow", 1), ("I", 1), ("a", 1), ("oa",1)]
    # col_bn = ["t_0", "w_0", "ow_0", "I_0", "a_0", "oa_0", "t_1", "w_1", "ow_1", "I_1", "a_1", "oa_1"]
    #This one is for BN
    col_bn = ["t_0", "w_0", "I_0", "a_0", "oa_0", "t_1", "w_1", "ow_1"]
    df.columns = col
    df_bn.columns = col_bn
    df.insert(6, ("al", 0), " ")
    df.insert(13, ("al", 1), " ")
    df_bn.insert(5, "al_0", " ")
    # df_bn.insert(6, "al_0", " ")
    # df_bn.insert(13, "al_1", " ")

    for i in col:
        df[i] = pd.to_numeric(df[i])

    for i in col_bn:
        df_bn[i] = pd.to_numeric(df_bn[i])

    #we specify the number of bins we want to have to descritize the data for than 6 bins won't work in our case because many of our data are interger between 1 to 7
    bin_num = 5
    bins = [0.9 + (x/bin_num)*(bin_num +1 +0.1) for x in range(bin_num+1)]
    # print(bins)
    # define the labels for each category
    labels = list(range(0, bin_num))
    # print(labels)

    # use the cut() function to categorize the values
    df_bn['w_0'] = pd.cut(df_bn['w_0'], bins=bins, labels=labels, right=True)
    df_bn['w_1'] = pd.cut(df_bn['w_1'], bins=bins, labels=labels, right=True)
    df_bn['ow_1'] = pd.cut(df_bn['ow_1'], bins=bins, labels=labels, right=True)
    df_bn['t_1'] = pd.cut(df_bn['t_1'], bins=bins, labels=labels, right=True)
    df_bn['t_0'] = pd.cut(df_bn['t_0'], bins=bins, labels=labels, right=True)

    # bins = [1.0 + (x/13)*6.0 for x in range(14)]
    #
    # # define the labels for each category
    # labels = [1.0, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7.0]
    #
    # # use the cut() function to categorize the values
    # df_bn['w_0'] = pd.cut(df_bn['w_0'], bins=bins, labels=labels)
    # df_bn['w_1'] = pd.cut(df_bn['w_1'], bins=bins, labels=labels)
    # df_bn['ow_1'] = pd.cut(df_bn['ow_1'], bins=bins, labels=labels)
    #then we return the df for both dbn format and bn format
    return df, df_bn

#This function is similar to previous one but here we consider all 4 data point of each participant as 4 time step. This one is used when we have 2 dbn (SC-dbn and
# RC-dbn)
def make_dbn_data_unique_turkID(main_survey_done_df, swap_df):
    # sat0 = main_survey_done_df['1_satisfaction3']
    # sat1 = main_survey_done_df['3_satisfaction3']

    t0 = main_survey_done_df['1_trust2_0']
    t1 = main_survey_done_df['3_trust2_0']
    t2 = main_survey_done_df['1_trust2_1']
    I1 = main_survey_done_df['2_Intention_0']
    I2 = main_survey_done_df['2_Intention_1']
    a1 = main_survey_done_df['drive_name_0'].str[3]
    ow0 = swap_df['ror_ow0']
    # ow0 = swap_df['ror_ow1']
    ow1 = swap_df['ror_ow1']
    # print(ow0, ow1)
    ow2 = swap_df['ror_ow2']
    # ow0 = main_survey_done_df['3_total_0']
    # ow1 = main_survey_done_df['1_total_1']
    # ow2 = main_survey_done_df['3_total_1']
    w0 = main_survey_done_df['1_total_0']
    w1 = main_survey_done_df['3_total_0']
    w2 = main_survey_done_df['1_total_1']
    oa2 = main_survey_done_df['drive_name_1'].str[2]
    # ow1 = pd.DataFrame({'C': ow_list})
    # ow0 = ow1

    df_bn = pd.concat([t0, w0, ow0, I1, a1, t1, w1, ow1, t2, w2, ow2, oa2], axis=1)
    # df_bn = df_bn.dropna()


    col_bn = ["t_0", "w_0", "ow_0", "I_1", "a_1", "t_1", "w_1", "ow_1", "t_2", "w_2", "ow_2", "oa_2"]
    df_bn.columns = col_bn
    df_bn.insert(5, "al_1", " ")
    # df_bn.insert(6, "al_0", " ")
    # df_bn.insert(13, "al_1", " ")
    # print(df_bn['ow_0'])
    for i in col_bn:
        df_bn[i] = pd.to_numeric(df_bn[i])

    bin_num = 6
    bins = [0.999 + (x/bin_num)*(bin_num +1 +0.001) for x in range(bin_num+1)]
    # print(bins)
    # define the labels for each category
    labels = list(range(0, bin_num))
    # print(labels)


    # use the cut() function to categorize the values
    df_bn['w_0'] = pd.cut(df_bn['w_0'], bins=bins, labels=labels, right=True)
    df_bn['w_1'] = pd.cut(df_bn['w_1'], bins=bins, labels=labels, right=True)
    df_bn['w_2'] = pd.cut(df_bn['w_2'], bins=bins, labels=labels, right=True)
    df_bn['t_1'] = pd.cut(df_bn['t_1'], bins=bins, labels=labels, right=True)
    df_bn['t_0'] = pd.cut(df_bn['t_0'], bins=bins, labels=labels, right=True)
    df_bn['t_2'] = pd.cut(df_bn['t_2'], bins=bins, labels=labels, right=True)
    df_bn['ow_0'] = pd.cut(df_bn['ow_0'], bins=bins, labels=labels, right=True)
    df_bn['ow_1'] = pd.cut(df_bn['ow_1'], bins=bins, labels=labels, right=True)
    df_bn['ow_2'] = pd.cut(df_bn['ow_2'], bins=bins, labels=labels, right=True)
    # print(df_bn['ow_0'])
    return df_bn

#This function prepare the data for using it in sem model for perceived satisfaction and wellbeing
def make_sem_data_well_ps(main_survey_done_df):

    a1 = main_survey_done_df['drive_name'].str[3]
    w0 = main_survey_done_df['1_total']
    w1 = main_survey_done_df['3_total']
    ps0 = main_survey_done_df['1_perception']
    ps1 = main_survey_done_df['3_perception']
    t1 = main_survey_done_df['3_trust2']
    al1 = (a1 == main_survey_done_df['2_Intention']).astype(int)

    df_bn = pd.concat([w0, w1, ps0, ps1, a1, al1, t1], axis=1)
    # df_bn = df_bn.dropna()

    col_bn = ["wellbeing_t0", "wellbeing_t1", "perceived_sat_t0", "perceived_sat_t1", "action", "alignment", "trust"]
    df_bn.columns = col_bn

    for i in col_bn:
        df_bn[i] = pd.to_numeric(df_bn[i])

    return df_bn

#This function prepare the data for using it in sem model for perceived satisfaction and wellbeing and in addition it consider all elements of wellbeing to use it
# separately in the model
def make_sem_data_well_ps_detail(main_survey_done_df):

    a1 = main_survey_done_df['drive_name'].str[3]
    w0 = main_survey_done_df['1_total']
    w1 = main_survey_done_df['3_total']
    p1 = main_survey_done_df['3_positive1']
    p2 = main_survey_done_df['3_positive2']
    s1 = main_survey_done_df['3_satisfaction1']
    s2 = main_survey_done_df['3_satisfaction2']
    s3 = main_survey_done_df['3_satisfaction3']
    w = main_survey_done_df['3_wellbeing']
    t = main_survey_done_df['3_trust1']
    p10 = main_survey_done_df['1_positive1']
    p20 = main_survey_done_df['1_positive2']
    s10 = main_survey_done_df['1_satisfaction1']
    s20 = main_survey_done_df['1_satisfaction2']
    s30 = main_survey_done_df['1_satisfaction3']
    w0 = main_survey_done_df['1_wellbeing']
    t0 = main_survey_done_df['1_trust1']
    ps0 = main_survey_done_df['1_perception']
    ps1 = main_survey_done_df['3_perception']
    t1 = main_survey_done_df['3_trust2']
    al1 = (a1 == main_survey_done_df['2_Intention']).astype(int)

    df_bn = pd.concat([w0, w1, ps0, ps1, a1, al1, t1, p1, p2, s1, s2, s3, w, t, p10, p20, s10, s20, s30, w0, t0], axis=1)
    # df_bn = df_bn.dropna()

    col_bn = ["wellbeing_t0", "wellbeing_t1", "perceived_sat_t0", "perceived_satisfaction", "action", "alignment", "trust", "p1_2", "p2_2", "s1_2", "s2_2", "s3_2",
              "w_2", "t_2", "p1_1", "p2_1", "s1_1", "s2_1", "s3_1", "w_1", "t_1"]
    df_bn.columns = col_bn

    for i in col_bn:
        df_bn[i] = pd.to_numeric(df_bn[i])

    return df_bn